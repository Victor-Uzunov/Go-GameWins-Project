package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"application/graph/model"
	"application/poker"
	"context"
	"fmt"
	"strconv"
)

// AddPlayer is the resolver for the addPlayer field.
func (r *mutationResolver) AddPlayer(ctx context.Context, id string, name string, wins int) (*model.Player, error) {
	player := &poker.Player{
		Name: name,
		Wins: wins,
	}
	r.Store.AddPlayer(player)
	modelPlayer := &model.Player{
		Name: player.Name,
		Wins: player.Wins,
	}
	return modelPlayer, nil
}

// RecordWin is the resolver for the recordWin field.
func (r *mutationResolver) RecordWin(ctx context.Context, id string) (*model.Player, error) {
	num, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	r.Store.RecordWin(num)
	player := &model.Player{
		ID: id,
	}
	return player, nil
}

// League is the resolver for the league field.
func (r *queryResolver) League(ctx context.Context) ([]*model.Player, error) {
	result := make([]*model.Player, 0)
	league := r.Store.GetLeague()
	for _, player := range league {
		result = append(result, Convert(player))
	}
	return result, nil
}

// Player is the resolver for the player field.
func (r *queryResolver) Player(ctx context.Context, id string) (*model.Player, error) {
	num, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	player := r.Store.GetLeague().Find(num)
	if player == nil {
		return nil, fmt.Errorf("player not found")
	}
	return Convert(*player), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
